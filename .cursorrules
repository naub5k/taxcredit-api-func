# taxcredit-api-func 프로젝트 규칙

## 🔧 프로젝트 특성
- **타입**: Azure Functions 전용 API 서버
- **언어**: Node.js (JavaScript)
- **런타임**: Azure Functions v4
- **DB**: SQL Server (Azure SQL Database)
- **배포**: GitHub Actions → Azure Functions
- **역할**: 공통 API 서버 (analyze, visual 프로젝트에서 공용 사용)

## 📁 프로젝트 구조
```
taxcredit-api-func/
├── analyze/                   # 세액공제 분석 함수
├── analyzeCompanyData/        # 회사 데이터 분석 함수
├── utils/                     # 공통 유틸리티
├── .github/workflows/         # GitHub Actions
├── host.json                  # Functions 런타임 설정
├── local.settings.json        # 로컬 환경 변수
├── package.json               # 의존성 관리
└── test-*.js                  # 테스트 파일들
```

## 🎯 핵심 기능
- **세액공제 분석**: `/api/analyze` 엔드포인트
- **회사 데이터 조회**: 사업자등록번호 기반 검색
- **업종 구분**: 다중 업종 감지 및 선택 로직
- **연도별 데이터**: 2019~2025년 인원수 데이터 처리
- **성능 최적화**: 대용량 데이터 페이징 및 캐싱

## 🔗 API 엔드포인트
- **Production**: `https://taxcredit-api-func.azurewebsites.net/api/`
- **주요 함수**:
  - `GET /analyze?bizno={사업자번호}` - 다중 업종 목록
  - `GET /analyze?bizno={사업자번호}&recordId={업종ID}` - 특정 업종 분석
  - `POST /analyzeCompanyData` - 회사 데이터 분석

## 🗄️ 데이터베이스 연동
- **DB**: Azure SQL Database
- **연결**: Connection Pool 사용
- **쿼리 최적화**: 페이징, 인덱싱 활용
- **보안**: 연결 문자열 Azure Key Vault 관리
- **트랜잭션**: 필요 시 SQL Transaction 사용

## ⚠️ 주의사항
- **CORS 설정**: 모든 클라이언트 앱에서 접근 가능하도록 설정
- **환경 변수**: `local.settings.json`는 git에 포함하지 않음
- **에러 핸들링**: 모든 API에서 일관된 에러 응답 구조
- **로깅**: console.log 대신 Azure Functions 로깅 사용
- **타임아웃**: 장시간 실행되는 쿼리 최적화 필요

## 🚀 배포 설정
- **GitHub Actions**: `.github/workflows/` 자동 배포
- **환경**: Production 환경만 사용
- **Node.js**: 18-20 버전 (.nvmrc 필요)
- **빌드**: `npm ci && npm run build` (필요시)
- **설정**: Azure Portal에서 Application Settings 관리

## 🔧 개발 명령어
```bash
# 로컬 개발
npm install
func start                     # 로컬에서 Functions 실행

# 테스트
node test-analyzeCompanyData.js      # 개별 함수 테스트
node test-performance-optimized.js  # 성능 테스트
node test-pagination-all-cases.js   # 페이징 테스트

# 배포 (자동화됨)
git push origin main          # GitHub Actions 자동 트리거
```

## 📊 성능 최적화
- **DB 연결 풀**: 재사용 가능한 연결 관리
- **쿼리 최적화**: 인덱스 활용, 불필요한 JOIN 제거
- **페이징**: 대용량 데이터셋 처리
- **캐싱**: 자주 요청되는 데이터 캐시 활용
- **타임아웃**: Cold Start 최소화

## 🧪 테스트 전략
- **단위 테스트**: 각 함수별 개별 테스트
- **통합 테스트**: DB 연결 포함 전체 플로우 테스트
- **성능 테스트**: 대용량 데이터 처리 시나리오
- **로컬 테스트**: `test-local.js`로 로컬 환경 검증

## 🔒 보안 고려사항
- **SQL Injection**: Parameterized Query 사용
- **환경 변수**: 민감한 정보는 Azure Key Vault
- **HTTPS**: 모든 통신 HTTPS 강제
- **CORS**: 필요한 도메인만 허용

## 📝 개발 히스토리
- Azure Functions v4 기반 API 서버 구축
- SQL Server 최적화 및 성능 튜닝
- GitHub Actions 자동 배포 파이프라인 구축
- 대용량 데이터 처리 최적화 완료
- 업종 다중 선택 로직 개발 