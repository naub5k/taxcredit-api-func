# taxcredit-api-func 프로젝트 규칙 (✅ 배포 완료 - 2025-06-16)

## 📌 배포 정보
- **배포 주소**: https://taxcredit-api-func.azurewebsites.net
- **배포 상태**: ✅ 성공 (2025-06-16)
- **검증 방법**: AI 분석 API 정상 JSON 응답 확인

## 🔧 프로젝트 특성
- **타입**: Azure Functions 전용 API 서버
- **언어**: Node.js (JavaScript)
- **런타임**: Azure Functions v4
- **DB**: SQL Server (Azure SQL Database)
- **배포**: Azure Functions Core Tools
- **역할**: 공통 API 서버 (analyze, visual 프로젝트에서 공용 사용)

## 📁 프로젝트 구조
```
taxcredit-api-func/
├── analyze/                   # 세액공제 분석 함수 (메인 API)
├── analyzeCompanyData/        # 회사 데이터 분석 함수
├── utils/                     # 공통 유틸리티
├── host.json                  # Functions 런타임 설정 (CORS 포함)
├── local.settings.json        # 로컬 환경 변수
├── package.json               # 의존성 관리
├── deploy.bat                 # 배포 스크립트
└── test-*.js                  # 테스트 파일들
```

## 🛠️ 해결된 주요 문제들
### 1. **Azure Functions 정지 문제** (✅ 완료)
- **문제**: "Error 403 - This web app is stopped" 오류로 모든 API 중단
- **해결**: Azure Portal에서 함수 앱 수동 재시작
- **예방**: 정기적인 헬스체크 및 모니터링 체계 구축

### 2. **CORS 설정 문제** (✅ 완료)
- **문제**: 프론트엔드에서 API 호출 시 CORS 오류
- **해결**: `host.json`에서 `allowedOrigins: ["*"]` 설정
- **결과**: 모든 클라이언트 앱에서 API 정상 접근 가능

### 3. **데이터베이스 연결 최적화** (✅ 완료)
- **문제**: 동시 연결 수 제한으로 인한 성능 저하
- **해결**: 연결 풀링 및 캐싱 메커니즘 구현
- **결과**: 안정적인 DB 연결 및 성능 향상

## 🎯 핵심 API 엔드포인트 (검증 완료)
- **Production**: `https://taxcredit-api-func.azurewebsites.net/api/`
- **주요 함수**:
  - `POST /analyze` - AI 기반 세액공제 분석 (메인 API)
  - `GET /analyze?bizno={사업자번호}` - 다중 업종 목록
  - `GET /analyze?bizno={사업자번호}&recordId={업종ID}` - 특정 업종 분석
  - `GET /analyzeCompanyData` - 회사 데이터 페이징 조회

## 🔗 API 검증 방법
```bash
# 1. 기본 상태 확인
curl https://taxcredit-api-func.azurewebsites.net

# 2. AI 분석 API 테스트
curl -X POST https://taxcredit-api-func.azurewebsites.net/api/analyze \
  -H "Content-Type: application/json" \
  -d '{"bizno": "1018197530"}'

# 3. 정상 응답 확인 (환수위험/추징위험/사후관리완료 등)
```

## 🗄️ 데이터베이스 연동 (최적화 완료)
- **DB**: Azure SQL Database
- **연결**: Connection Pool 사용으로 안정성 확보
- **쿼리 최적화**: 페이징, 인덱싱 활용
- **보안**: SQL Injection 방지, Parameterized Query 사용
- **성능**: 연결 풀링으로 응답 속도 개선

## 🚀 검증된 배포 설정
```json
// host.json (CORS 설정 포함)
{
  "version": "2.0",
  "cors": {
    "allowedOrigins": ["*"],
    "allowedMethods": ["GET", "POST", "OPTIONS"],
    "allowedHeaders": ["*"]
  }
}
```

## ⚠️ 주의사항 (검증된 설정)
- **Azure Portal 모니터링**: 정기적인 함수 앱 상태 확인 필요
- **CORS 유지**: `host.json`의 CORS 설정 변경 금지
- **환경 변수**: `local.settings.json`는 git에 포함하지 않음
- **에러 핸들링**: 모든 API에서 일관된 에러 응답 구조 유지
- **연결 풀**: DB 연결 최적화 설정 유지

## 🔧 개발 및 배포 명령어
```bash
# 로컬 개발
npm install
func start                     # 로컬에서 Functions 실행

# 프로덕션 배포
npx func azure functionapp publish taxcredit-api-func

# 배포 상태 확인
npx func azure functionapp logstream taxcredit-api-func

# 테스트
node test-analyzeCompanyData.js      # 개별 함수 테스트
```

## 📊 성능 및 운영 상태
### **응답 시간** (최적화 완료)
- **AI 분석**: 평균 2-4초
- **데이터 조회**: 평균 0.5-1초
- **대용량 분석**: 평균 3-8초

### **가용성** (모니터링 중)
- ✅ **API 서버**: 99.9% 가용성 목표
- ✅ **DB 연결**: 안정적인 연결 풀 관리
- ✅ **에러 핸들링**: 적절한 오류 응답 및 로깅

## 🔒 보안 고려사항 (구현 완료)
- ✅ **SQL Injection**: Parameterized Query 사용
- ✅ **HTTPS**: 모든 통신 HTTPS 강제
- ⚠️ **API 키**: 현재 공개 API (향후 인증 추가 예정)
- ✅ **입력 검증**: 사업자등록번호 등 입력값 검증

## 🔍 배포 검증 방법
1. **API 상태 확인**: 기본 엔드포인트 접속 테스트
2. **AI 분석 테스트**: POST 요청으로 분석 결과 확인
3. **응답 구조 검증**: JSON 형식 및 필수 필드 확인
4. **에러 핸들링**: 잘못된 입력값에 대한 적절한 오류 응답 확인

## 📝 개발 히스토리 (✅ 완료)
- Azure Functions v4 기반 API 서버 구축
- SQL Server 최적화 및 성능 튜닝
- Azure Functions 정지 문제 해결
- CORS 설정 문제 해결
- 대용량 데이터 처리 최적화 완료
- 2025.06.16: 배포 성공 및 검증 시스템 구축
- 2025.06.16: README.md 문서화 완료

## 🔄 향후 운영 가이드라인
- Azure Portal에서 정기적인 함수 앱 상태 모니터링
- CORS 설정 변경 시 모든 클라이언트 앱에서 테스트 필수
- DB 연결 풀 설정 변경 시 성능 테스트 수행
- 새로운 API 추가 시 기존 에러 핸들링 패턴 따르기
- 배포 후 반드시 API 검증 방법으로 정상 작동 확인 